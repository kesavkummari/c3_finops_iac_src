version: 0.2

env:
  shell: bash
  variables:
    TF_IN_AUTOMATION: "true"
    TF_INPUT: "0"
    # set ENVIRONMENT in the build environment or CodePipeline (dev|qa|prod)
    ACTION: "plan"             # override to "apply" when needed
  parameter-store:
    # Optional: inject sensitive values as SSM params
    TF_VAR_db_password: "/c3ops/dev/db_password"
  exported-variables:
    - PLAN_FILE
phases:
  install:
    commands:
      - echo "Installing tooling..."
      - yum -y install jq unzip >/dev/null
      # Terraform (pin version)
      - TF_VERSION=1.3.9
      - curl -sSLo tf.zip https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip
      - unzip -o tf.zip -d /usr/local/bin && rm tf.zip
      - terraform -version
      - jq --version
  pre_build:
    commands:
      - set -euo pipefail
      - echo "ENVIRONMENT=$ENVIRONMENT ACTION=$ACTION"
      # Resolve region & account from STS using jq
      - AWS_REGION=${AWS_REGION:-"ap-south-1"}
      - ACCOUNT_ID=$(aws sts get-caller-identity | jq -r .Account)
      - echo "ACCOUNT_ID=$ACCOUNT_ID AWS_REGION=$AWS_REGION"
      # Export TF_VAR_* from discovered values (example)
      - export TF_VAR_region="$AWS_REGION"
      - export TF_VAR_account_id="$ACCOUNT_ID"
      # Optionally derive VPC/Subnets dynamically with jq (example)
      - export VPC_ID=$(aws ec2 describe-vpcs --filters Name=isDefault,Values=true | jq -r '.Vpcs[0].VpcId')
      - export TF_VAR_vpc_id="$VPC_ID"
      - echo "Using VPC_ID=$VPC_ID"
      # Select backend config & tfvars by environment
      - BACKEND_FILE="env/backend-${ENVIRONMENT}.hcl"
      - TFVARS_FILE="env/${ENVIRONMENT}.tfvars"
      - test -f "$BACKEND_FILE" && cat "$BACKEND_FILE"
      - test -f "$TFVARS_FILE" && echo "tfvars present for $ENVIRONMENT"
      # Initialize backend
      - cd main
      - terraform init -input=false -reconfigure -backend-config="../${BACKEND_FILE}"
      # Workspaces: create if missing, then select
      - if ! terraform workspace list | grep -q " ${ENVIRONMENT}\$"; then terraform workspace new "${ENVIRONMENT}"; fi
      - terraform workspace select "${ENVIRONMENT}"
  build:
    commands:
      - set -euo pipefail
      - PLAN_FILE="tfplan-${ENVIRONMENT}.bin"
      # Validate & format
      - terraform fmt -check
      - terraform validate
      # Create a plan (saved as artifact for approvals)
      - terraform plan -input=false -lock=true -lock-timeout=5m -out="${PLAN_FILE}" -var-file="../${TFVARS_FILE}"
      - terraform show -no-color "${PLAN_FILE}" | tee "tfplan-${ENVIRONMENT}.txt"
      - if [ "$ACTION" = "apply" ]; then
          echo "Applying plan...";
          terraform apply -input=false -lock=true -lock-timeout=5m "${PLAN_FILE}";
        else
          echo "ACTION=plan; skipping apply";
        fi
  post_build:
    commands:
      - echo "Done."
artifacts:
  files:
    - main/tfplan-*.txt
  discard-paths: yes
cache:
  paths:
    - /root/.terraform.d/plugin-cache/**/*
